/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.espn.mule.connector.phantomjs;

import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;
/*
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.ConnectionException;
 */

import com.espn.phantomjs.PhantomJs;
import com.espn.phantomjs.client.*;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;

/**
 * exposes phantomjs as a mule processor 
 * http://phantomjs.org
 *
 * @author arlethp1
 */
@Connector(name="phantomjs", schemaVersion="1.0-SNAPSHOT")
public class PhantomJsConnector
{
    /**
     * location of the phantomjs executable file
     */
    @Configurable
    @Optional @Default("/usr/local/bin/phantomjs")
    private String phantomjsBinary = "/usr/local/bin/phantomjs";

    public String getPhantomjsBinary() {
        return phantomjsBinary;
    }

    public void setPhantomjsBinary(String phantomjsBinary) {
        this.phantomjsBinary = phantomjsBinary;
    }
    
    /**
     * default phantomjs request and response timeout
     * defaults to 60 seconds
     */
    @Configurable
    @Optional
    @Default("60")
    private int timeout = 60;

    public int getTimeout() {
        return timeout;
    }

    public void setTimeout(int timeout) {
        this.timeout = timeout;
    }

    private PhantomJs phantomJsClient = null;

    private synchronized PhantomJs getPhantomJs() {
        if (this.phantomJsClient == null) {
            this.phantomJsClient = new PhantomJs(new PhantomJsWebDriverClient(getPhantomjsBinary(), getTimeout()));
        }
        return this.phantomJsClient;
    }
    
    /**
     * screenshot takes screenshots of webpages
     *
     * {@sample.xml ../../../doc/PhantomJs-connector.xml.sample phantomjs:screenshot}
     * @param url web address of the site you want to take a screenshot of
     * @return png image bytes
     * @throws Exception for url
     */
    @Processor
    public byte[] screenshot( String url ) throws Exception {
        return getPhantomJs().screenshot(url);
    }

    /**
     * execute script on page load
     *
     * {@sample.xml ../../../doc/PhantomJs-connector.xml.sample phantomjs:execute-script}
     * @param url web address of the site you want to run the script on
     * @param scriptSrc javascript source code
     * @return script result as string;
     * @throws Exception for url
     */
    @Processor
    public String executeScript( String url, String scriptSrc ) throws Exception {
        return getPhantomJs().executeScript(url, scriptSrc, null);
    }
}
